생성: 
입력된 블록 사이즈대로 rootBID와 depth를 모두 0으로 하여 헤더를 선언하고, 이진 파일로 출력하였습니다.

삽입: 
Empty 상태에서 삽입이 발생한 경우, depth가 0인 상태에서 삽입이 발생한 경우, 루트노드가 가득차서 처음으로 스플릿이 일어난 경우, 그 이후 일반적인 경우를 각각 나누어서 구현을 하였습니다. 
노드는 Leaf노드와 NLeaf노드로 객체를 구현해 놓았습니다. Btree 구조체에도 insert가 있지만, 구현의 편의상 노드 자체에 insert라는 멤버함수를  또 구현해 두었습니다. 이는 해당 노드에 원소를 삽입하기를 시도하고, 만약 삽입이 성공했다면 -1을 반환하며, 노드가 full이어서 삽입에 실패했다면, 해당 원소가 삽입되어졌어야 할 위치의 인덱스 값을 반환합니다. 이렇게 반환 받은 인덱스를 통해 스플릿을 진행하였습니다.
스플릿의 경우에는 Leaf노드와 Nleaf노드의 경우가 서로 다른 방법을 사용하기 때문에 지금 스플릿을 해야하는 노드가 리프인지 아닌지를 판단하기 위해서 위에서 처럼 여러 경우로 나누어 놓았습니다. 그리고 만약 노드에 들어갈 수 있는 key값이 N개라면, 간단하게 N+1개의 공간을 할당 받아 놓고, 삽입을 먼저 진행한 뒤에 스플릿을 할 수도 있었지만, 그렇게 공간을 낭비하고 싶지 않아서 정확하게 N개의 공간만 할당을 받아 놓고, 위에서 노드 자체의 멤버함수로 구현해 놓은 insert함수로부터 알아낸 ‘삽입되어졌어야 할 위치의 인덱스’ 값을 이용하여, 지금 삽입하려는 원소가 왼쪽 노드에 들어가는 경우와 오른쪽 노드에 들어가야할 경우 등 여러 경우를 나누어서 왼쪽과 오른쪽 노드에 적절하게 스플릿을 진행하였습니다.
Nleaf노드의 경우에도 부모 노드로 원소 한 개를 올려야 하는 것을 제외하고는 동일한 방법으로 스플릿을 구현하였습니다.

탐색:
루트노드부터 불러와서 key값을 비교하며 리프노드까지 타고 내려가서 탐색을 할 수 있도록 하였다. 이때, btree는 항상 balanced된 상태이므로 depth만큼 타고 내려가면 되므로 while문을 쓰지 않고, for문으로 정해진 depth만큼 반복문을 돌렸다.

범위탐색:
탐색과 마찬가지로 start range를 기준으로 리프노드까지 타고 내려가서, end range까지 선형적으로 탐색을 하며 출력을 해주었습니다.

출력:
출력의 경우에는, 데이터가 없는 경우, 루트 노드만 있는 경우, 정확하게 depth가 1인 경우, 그리고 그 외의 경우로 나누어서 출력을 하도록 구현하였습니다.

컴파일 방법과 실행 방법:
비쥬얼 스튜디오 상에서 빈 프로젝트를 생성하여 C++를 기반으로 코딩을 하였습니다. 실행은 디버그 모드로 컴파일을 한 뒤에, cpp파일이 있는 폴더의 상위 폴더에 있는 debug폴더 내에 생성된 exe파일을 cmd를 이용해 실행하였습니다. Insertion.txt 파일이나 관련된 txt파일은 exe파일과 같은 경로내에 위치해야 정상적으로 실행이 되고, 출력 또한 exe파일이 위치한 경로에 출력합니다.

명령어 예시:
>btree.exe c btree.bin 36
>btree.exe i btree.bin sample_insertion_input.txt
>btree.exe s btree.bin sample_search_input.txt searched.txt
>btree.exe r btree.bin sample_range_search_input.txt range_searched.txt
>btree.exe p btree.bin printed.txt

sample_insertion_input.txt:
15,890
418,807
567,215
992,946
114,711
383,334
231,442
526,431
249,925
57,516
86,917
894,129
31,760
341,593
707,336
454,692
850,679
925,186
275,152
277,201
746,21
657,484
351,567
990,222
296,181
137,600
795,580

sample_search_input.txt:
15
231
795
57
31

sample_range_search_input.txt
16,300

